{"version":3,"sources":["components/Map.js","components/Alert.js","App.js","serviceWorker.js","index.js"],"names":["Map","cityMarker","userMarker","onClick","center","zoom","minZoom","maxZoom","attributionControl","zoomControl","doubleClickZoom","scrollWheelZoom","dragging","animate","easeLinearity","onclick","GeoJSON","data","geoJSON","style","color","weight","fillColor","fillOpacity","ZoomControl","position","Marker","lat","lng","Alert","props","elevation","variant","CAPITAL_CITIES","capitalCitiesList","capitalCities","getDistanceInKilometers","latLng1","latLng2","distanceInKilometers","Math","round","distanceTo","e","App","useState","kilometersLeft","setKilometersLeft","citiesPlaced","setCitiesPlaced","currentCityIndex","setCurrentCityIndex","setUserMarker","setCityMarker","isGameOver","setIsGameOver","isPlaying","setIsPlaying","isShowingFeedback","setIsShowingFeedback","React","useEffect","isUserPlacementCorrect","prev","max","hasGameFinished","startGame","restartGame","handlePinPlacement","L","latLng","long","showFeedbackAndWait","setTimeout","FEEDBACK_DURATION_IN_MILLIS","length","handleFeedbackClose","className","Paper","backgroundColor","padding","marginBottom","Button","fullWidth","capitalCity","size","latlng","Snackbar","open","autoHideDuration","onClose","severity","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8b102e0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Map as LeafletMap, GeoJSON, Marker, ZoomControl } from \"react-leaflet\";\r\n\r\nimport geoJSON from \"../custom.geo.json\";\r\n\r\nconst Map = ({ cityMarker, userMarker, onClick }) => {\r\n  return (\r\n    <LeafletMap\r\n      center={[50, 10]}\r\n      zoom={3}\r\n      minZoom={3}\r\n      maxZoom={7}\r\n      attributionControl={true}\r\n      zoomControl={false}\r\n      doubleClickZoom={true}\r\n      scrollWheelZoom={true}\r\n      dragging={true}\r\n      animate={true}\r\n      easeLinearity={0.35}\r\n      onclick={onClick}\r\n    >\r\n      <GeoJSON\r\n        data={geoJSON}\r\n        style={() => ({\r\n          color: \"#4a83ec\",\r\n          weight: 0.5,\r\n          fillColor: \"#3f51b5\",\r\n          fillOpacity: 1,\r\n        })}\r\n      />\r\n      <ZoomControl position=\"bottomleft\" />\r\n      {userMarker && <Marker position={[userMarker.lat, userMarker.lng]} />}\r\n      {cityMarker && <Marker position={[cityMarker.lat, cityMarker.lng]} />}\r\n    </LeafletMap>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport { Alert as MuiAlert } from \"@material-ui/lab\";\r\n\r\nconst Alert = (props) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\nexport default Alert;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Snackbar, Paper } from \"@material-ui/core\";\r\nimport L from \"leaflet\";\r\n\r\nimport \"./App.css\";\r\n\r\nimport capitalCitiesList from \"./capitalCities.json\";\r\n\r\nimport Map from \"./components/Map\";\r\nimport Alert from \"./components/Alert\";\r\n\r\nconst INITIAL_KILOMETERS = 1500;\r\nconst CAPITAL_CITIES = capitalCitiesList.capitalCities;\r\nconst FEEDBACK_DURATION_IN_MILLIS = 1500;\r\nconst SNACKBAR_TRANSITION_DURATION = 200;\r\n\r\nconst getDistanceInKilometers = (latLng1, latLng2) => {\r\n  let distanceInKilometers;\r\n  try {\r\n    distanceInKilometers = Math.round(latLng1.distanceTo(latLng2) / 1000);\r\n  } catch (e) {\r\n    return 0;\r\n  }\r\n\r\n  return distanceInKilometers;\r\n};\r\n\r\nconst App = () => {\r\n  const [kilometersLeft, setKilometersLeft] = useState(INITIAL_KILOMETERS);\r\n  const [citiesPlaced, setCitiesPlaced] = useState(0);\r\n  const [currentCityIndex, setCurrentCityIndex] = useState(0);\r\n  const [userMarker, setUserMarker] = useState(null);\r\n  const [cityMarker, setCityMarker] = useState(null);\r\n  const [isGameOver, setIsGameOver] = useState(false);\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [isShowingFeedback, setIsShowingFeedback] = useState(false);\r\n\r\n  // Every time a cityMarker is shown, subtract distance to user placed marker from app state\r\n  React.useEffect(() => {\r\n    if (cityMarker !== null) {\r\n      const distanceInKilometers = getDistanceInKilometers(\r\n        cityMarker,\r\n        userMarker\r\n      );\r\n\r\n      if (!isUserPlacementCorrect()) {\r\n        setKilometersLeft((prev) => Math.max(0, prev - distanceInKilometers));\r\n      } else {\r\n        setCitiesPlaced((prev) => prev + 1);\r\n      }\r\n    }\r\n  }, [cityMarker]);\r\n\r\n  // Every time the kilometersLeft piece of state changes, check if game is over\r\n  React.useEffect(() => {\r\n    if (hasGameFinished()) {\r\n      setIsGameOver(true);\r\n    }\r\n  }, [kilometersLeft]);\r\n\r\n  const startGame = () => {\r\n    setIsPlaying(true);\r\n  };\r\n\r\n  const restartGame = () => {\r\n    setIsGameOver(false);\r\n    setCitiesPlaced(0);\r\n    setKilometersLeft(INITIAL_KILOMETERS);\r\n    setUserMarker(null);\r\n    setCityMarker(null);\r\n    startGame();\r\n  };\r\n\r\n  const handleMapClick = (e) => {\r\n    if (isPlaying) {\r\n      setUserMarker(e.latlng);\r\n    }\r\n  };\r\n\r\n  const handlePinPlacement = () => {\r\n    setCityMarker(\r\n      L.latLng(\r\n        CAPITAL_CITIES[currentCityIndex].lat,\r\n        CAPITAL_CITIES[currentCityIndex].long\r\n      )\r\n    );\r\n    showFeedbackAndWait();\r\n  };\r\n\r\n  const showFeedbackAndWait = () => {\r\n    setIsShowingFeedback(true);\r\n\r\n    setTimeout(() => {\r\n      setUserMarker(null);\r\n      setCityMarker(null);\r\n      setIsShowingFeedback(false);\r\n      setCurrentCityIndex((prev) => prev + 1);\r\n    }, FEEDBACK_DURATION_IN_MILLIS + SNACKBAR_TRANSITION_DURATION);\r\n  };\r\n\r\n  const isUserPlacementCorrect = () => {\r\n    return getDistanceInKilometers(cityMarker, userMarker) < 50;\r\n  };\r\n\r\n  const hasGameFinished = () => {\r\n    return currentCityIndex >= CAPITAL_CITIES.length - 1 || kilometersLeft <= 0;\r\n  };\r\n\r\n  const handleFeedbackClose = () => {\r\n    setIsShowingFeedback(false);\r\n  };\r\n\r\n  const renderBottomControls = () => {\r\n    return (\r\n      isPlaying &&\r\n      !isGameOver && (\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={handlePinPlacement}\r\n        >\r\n          Place\r\n        </Button>\r\n      )\r\n    );\r\n  };\r\n\r\n  const renderTopControls = () => {\r\n    return isPlaying ? (\r\n      <>\r\n        <Paper\r\n          style={{\r\n            backgroundColor: \"lightgray\",\r\n            padding: \"10px\",\r\n            marginBottom: \"5px\",\r\n          }}\r\n        >\r\n          {citiesPlaced} cities placed\r\n        </Paper>\r\n        <Paper\r\n          style={{\r\n            backgroundColor: \"lightgray\",\r\n            padding: \"10px\",\r\n            marginBottom: \"5px\",\r\n          }}\r\n        >\r\n          {kilometersLeft} kilometers left\r\n        </Paper>\r\n        {!isGameOver ? (\r\n          <p>\r\n            Select the location of \"\r\n            {CAPITAL_CITIES[currentCityIndex].capitalCity}\"\r\n          </p>\r\n        ) : (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            fullWidth\r\n            onClick={restartGame}\r\n          >\r\n            Restart\r\n          </Button>\r\n        )}\r\n      </>\r\n    ) : (\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        fullWidth\r\n        onClick={startGame}\r\n      >\r\n        Start\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"top-controls\">{renderTopControls()}</div>\r\n      <div className=\"map\">\r\n        <Map\r\n          userMarker={userMarker}\r\n          cityMarker={cityMarker}\r\n          onClick={handleMapClick}\r\n        />\r\n      </div>\r\n      <div className=\"bottom-controls\">{renderBottomControls()}</div>\r\n      <Snackbar\r\n        open={isShowingFeedback}\r\n        autoHideDuration={FEEDBACK_DURATION_IN_MILLIS}\r\n        onClose={handleFeedbackClose}\r\n      >\r\n        <Alert\r\n          onClose={handleFeedbackClose}\r\n          severity={isUserPlacementCorrect() ? \"success\" : \"error\"}\r\n        >\r\n          {isUserPlacementCorrect()\r\n            ? \"Correct\"\r\n            : `You missed by ${getDistanceInKilometers(\r\n                userMarker,\r\n                cityMarker\r\n              )} kilometers`}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Needed for IE\nimport \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}